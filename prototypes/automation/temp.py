def gen_data(N_files=N_FILES, PoolProcess=POOL_PROCESS, init_n_samples=N_SAMPLES_PER_PROCESS):
    for count_idx in range(1, N_files + 1):
        count = count_idx         
        start_n_samples = init_n_samples*25*(count-1)

        tic = time.time()
        pool = Pool(processes=PoolProcess)

        result1 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*0), target_AB_included, none_target_AB, filtered_time_data, count])
        result2 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*1), target_AB_included, none_target_AB, filtered_time_data, count])
        result3 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*2), target_AB_included, none_target_AB, filtered_time_data, count])
        result4 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*3), target_AB_included, none_target_AB, filtered_time_data, count])
        result5 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*4), target_AB_included, none_target_AB, filtered_time_data, count])
        result6 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*5), target_AB_included, none_target_AB, filtered_time_data, count])
        result7 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*6), target_AB_included, none_target_AB, filtered_time_data, count])
        result8 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*7), target_AB_included, none_target_AB, filtered_time_data, count])
        result9 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*8), target_AB_included, none_target_AB, filtered_time_data, count])
        result10 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*9), target_AB_included, none_target_AB, filtered_time_data, count])
        result11 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*10), target_AB_included, none_target_AB, filtered_time_data, count])
        result12 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*11), target_AB_included, none_target_AB, filtered_time_data, count])
        result13 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*12), target_AB_included, none_target_AB, filtered_time_data, count])
        result14 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*13), target_AB_included, none_target_AB, filtered_time_data, count])
        result15 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*14), target_AB_included, none_target_AB, filtered_time_data, count])
        result16 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*15), target_AB_included, none_target_AB, filtered_time_data, count])
        result17 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*16), target_AB_included, none_target_AB, filtered_time_data, count])
        result18 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*17), target_AB_included, none_target_AB, filtered_time_data, count])
        result19 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*18), target_AB_included, none_target_AB, filtered_time_data, count])
        result20 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*19), target_AB_included, none_target_AB, filtered_time_data, count])
        result21 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*20), target_AB_included, none_target_AB, filtered_time_data, count])
        result22 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*21), target_AB_included, none_target_AB, filtered_time_data, count])
        result23 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*22), target_AB_included, none_target_AB, filtered_time_data, count])
        if count==1:
            result24 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*23), target_AB_included, none_target_AB, filtered_time_data, count])
            result25 = pool.apply_async(gen_AB_lists_to_px_lists, [start_n_samples+(init_n_samples*24), target_AB_included, none_target_AB, filtered_time_data, count])

        total_target_M_list = np.zeros(((init_n_samples*46, len(filtered_time_data))))
        total_target_valid = np.zeros(((init_n_samples*2, len(filtered_time_data))))
        total_target_eval = np.zeros(((init_n_samples*2, len(filtered_time_data))))

        total_target_M_list[init_n_samples*0:init_n_samples*1],   total_target_M_list[init_n_samples*23:init_n_samples*24] = result1.get(timeout=None)
        total_target_M_list[init_n_samples*1:init_n_samples*2],   total_target_M_list[init_n_samples*24:init_n_samples*25] = result2.get(timeout=None)
        total_target_M_list[init_n_samples*2:init_n_samples*3],   total_target_M_list[init_n_samples*25:init_n_samples*26] = result3.get(timeout=None)
        total_target_M_list[init_n_samples*3:init_n_samples*4],   total_target_M_list[init_n_samples*26:init_n_samples*27] = result4.get(timeout=None)
        total_target_M_list[init_n_samples*4:init_n_samples*5],   total_target_M_list[init_n_samples*27:init_n_samples*28] = result5.get(timeout=None)
        total_target_M_list[init_n_samples*5:init_n_samples*6],   total_target_M_list[init_n_samples*28:init_n_samples*29] = result6.get(timeout=None)
        total_target_M_list[init_n_samples*6:init_n_samples*7],   total_target_M_list[init_n_samples*29:init_n_samples*30] = result7.get(timeout=None)
        total_target_M_list[init_n_samples*7:init_n_samples*8],   total_target_M_list[init_n_samples*30:init_n_samples*31] = result8.get(timeout=None)
        total_target_M_list[init_n_samples*8:init_n_samples*9],   total_target_M_list[init_n_samples*31:init_n_samples*32] = result9.get(timeout=None)
        total_target_M_list[init_n_samples*9:init_n_samples*10],  total_target_M_list[init_n_samples*32:init_n_samples*33] = result10.get(timeout=None)
        total_target_M_list[init_n_samples*10:init_n_samples*11], total_target_M_list[init_n_samples*33:init_n_samples*34] = result11.get(timeout=None)
        total_target_M_list[init_n_samples*11:init_n_samples*12],   total_target_M_list[init_n_samples*34:init_n_samples*35] = result12.get(timeout=None)
        total_target_M_list[init_n_samples*12:init_n_samples*13],   total_target_M_list[init_n_samples*35:init_n_samples*36] = result13.get(timeout=None)
        total_target_M_list[init_n_samples*13:init_n_samples*14],   total_target_M_list[init_n_samples*36:init_n_samples*37] = result14.get(timeout=None)
        total_target_M_list[init_n_samples*14:init_n_samples*15],   total_target_M_list[init_n_samples*37:init_n_samples*38] = result15.get(timeout=None)
        total_target_M_list[init_n_samples*15:init_n_samples*16],   total_target_M_list[init_n_samples*38:init_n_samples*39] = result16.get(timeout=None)
        total_target_M_list[init_n_samples*16:init_n_samples*17],   total_target_M_list[init_n_samples*39:init_n_samples*40] = result17.get(timeout=None)
        total_target_M_list[init_n_samples*17:init_n_samples*18],   total_target_M_list[init_n_samples*40:init_n_samples*41] = result18.get(timeout=None)
        total_target_M_list[init_n_samples*18:init_n_samples*19],   total_target_M_list[init_n_samples*41:init_n_samples*42] = result19.get(timeout=None)
        total_target_M_list[init_n_samples*19:init_n_samples*20],   total_target_M_list[init_n_samples*42:init_n_samples*43] = result20.get(timeout=None)
        total_target_M_list[init_n_samples*20:init_n_samples*21],   total_target_M_list[init_n_samples*43:init_n_samples*44] = result21.get(timeout=None)
        total_target_M_list[init_n_samples*21:init_n_samples*22],   total_target_M_list[init_n_samples*44:init_n_samples*45] = result22.get(timeout=None)
        total_target_M_list[init_n_samples*22:init_n_samples*23],   total_target_M_list[init_n_samples*45:init_n_samples*46] = result23.get(timeout=None)

        if count==1:
            total_target_valid[init_n_samples*0:init_n_samples*1], total_target_valid[init_n_samples*1:init_n_samples*2] = result24.get(timeout=None)
            total_target_eval[init_n_samples*0:init_n_samples*1], total_target_eval[init_n_samples*1:init_n_samples*2] = result25.get(timeout=None)

        pool.close()
        pool.join()
        toc = time.time()
        print("Calculated Time : {} s".format(toc-tic))
        
        return total_target_M_list, total_target_valid, total_target_eval